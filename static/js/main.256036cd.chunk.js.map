{"version":3,"sources":["components/isLoginMetaMask.js","components/isMetaMask.js","components/isDesiredNetwork.js","components/Login.js","MyComponent.js","App.js","serviceWorker.js","index.js"],"names":["isLoginMetaMask","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","Component","isMetaMask","isDesiredNetwork","Login","MyComponent","components","foo","boo","coo","doo","TagName","tag","detect","require","App","context","_this","handleShow","bind","assertThisInitialized","handleClose","handleClick","network","mount","init","state","show","isLogin","web3","name","window","open","setState","e","preventDefault","ethereum","enable","on","accounts","console","log","length","_this2","_this3","networkVersion","location","reload","content","src_MyComponent","Fragment","index_es","mb","onClick","Modal_default","onHide","Header","closeButton","Title","Body","Footer","Button_default","variant","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.256036cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Web3 from 'web3';\n\n\nexport default class isLoginMetaMask extends Component{\n\n    constructor(props){\n        super(props)\n    }\n    \n    render(){\n        return(\n            <div>\n                <p>Login into MetaMask\n            <br />\n          \n           \n          </p>\n            </div>\n          \n        )\n    }\n}","import React, { Component } from 'react';\nimport Web3 from 'web3';\n\n\n\nexport default class isMetaMask extends Component{\n    \n    constructor(props){\n        super(props);\n\n    }\n    render(){\n        return(\n            <div>\n                <p>Install MetaMask to Sign in\n                \n                </p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Web3 from 'web3';\n\n\nexport default class isDesiredNetwork extends Component{\n\n    constructor(props){\n        super(props)\n    }\n    \n    render(){\n        return(\n            <div>\n              <p>Connect to  ropsten network\n        <br />\n      </p>\n            </div>\n          \n        )\n    }\n}","import React, { Component } from 'react';\nimport Web3 from 'web3';\n\n\n\nexport default class Login extends Component{\n    \n    constructor(props){\n        super(props);\n\n    }\n    render(){\n        return(\n            <div>\n              <p>Sign in into your account now\n        <br />\n      </p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport isLoginMetaMask from './components/isLoginMetaMask';\nimport isMetaMask from './components/isMetaMask'\nimport  isDesiredNetwork  from './components/isDesiredNetwork'\nimport Login from './components/Login'\n\nclass MyComponent extends Component {\n    components = {\n        foo: isLoginMetaMask,\n        boo:isMetaMask,\n        coo:isDesiredNetwork,\n        doo:Login\n    };\n    render() {\n       const TagName = this.components[this.props.tag || 'foo'];\n       return <TagName />\n    }\n}\nexport default MyComponent;","\r\nimport React, { Component } from 'react';\r\nimport { Fragment } from 'react'\r\nimport { MetaMaskButton } from 'rimble-ui'\r\nimport Web3 from 'web3';\r\nimport MyComponent from './MyComponent'\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport './App.css';\r\nimport { resolve } from 'url';\r\nvar detect = require('detect-browser').detect\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.handleShow = this.handleShow.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.network = this.network.bind(this)\r\n    this.mount = this.mount.bind(this)\r\n\r\n    this.init= this.init.bind(this);\r\n\r\n\r\n    this.state = {\r\n      show: false,\r\n      isMetaMask: false,\r\n      isLoginMetaMask:false,\r\n      isDesiredNetwork:false,\r\n      isLogin:false\r\n    };\r\n  }\r\n\r\n    \r\n    mount(){\r\n    if (typeof web3 !== 'undefined') {\r\n      // If a web3 instance is already provided by Meta Mask.\r\n      this.init()\r\n     \r\n    } else {\r\n      // Specify default instance if no web3 instance provided\r\n     \r\n        const browser = detect()\r\n      \r\n        // Touch the web3 object to trigger Brave install prompt\r\n       \r\n      \r\n        switch (browser.name) {\r\n      \r\n          case 'firefox':\r\n            window.open('https://addons.mozilla.org/en-US/firefox/addon/ether-metamask/','_blank')\r\n           \r\n      \r\n            break\r\n          \r\n            case 'chrome':\r\n             window.open('https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en','_blank')\r\n      \r\n          case 'opera':\r\n            window.open('https://addons.opera.com/en/extensions/details/metamask/','_blank')\r\n            \r\n            break\r\n      \r\n        }\r\n      }\r\n      \r\n      this.setState({ isMetaMask: true });\r\n\r\n    \r\n   \r\n  }\r\n  handleClick(e){\r\n    e.preventDefault();\r\n    this.init()\r\n  }\r\n  async init(){\r\n    try {\r\n      const accounts = await window.ethereum.enable()\r\n      this.setState({isDesiredNetwork:true})\r\n      this.network()\r\n    \r\n    } catch (error) {\r\n      \r\n      this.setState({isLoginMetaMask:true})\r\n      \r\n    }\r\n    window.ethereum.on('accountsChanged',(accounts) => {\r\n      console.log(accounts)\r\n      if(accounts.length===1){\r\n        console.log('hi')\r\n        this.setState({isLoginMetaMask:true,\r\n          isMetaMask: false,\r\n          isDesiredNetwork:false,\r\n          isLogin:false\r\n        })\r\n        \r\n      }\r\n      console.log('Hello')\r\n      \r\n    })\r\n\r\n   \r\n  }\r\n  network(){\r\n    let web3;\r\n    \r\n    // If a web3 instance is already provided by Meta Mask.\r\n      if (window.ethereum.networkVersion === \"3\") {\r\n        this.setState({isLogin:true})\r\n      } else {\r\n        \r\n          var desiredNetwork = \"3\"\r\n          window.ethereum.on('networkChanged', (accounts) =>{\r\n            console.log(accounts)\r\n            if(accounts===\"3\"){\r\n              this.setState({isLogin:true})\r\n            }\r\n            else{\r\n              this.setState({isLogin:false})\r\n              this.setState({isDesiredNetwork:true})\r\n            }\r\n          })\r\n            \r\n          \r\n        \r\n}\r\n\r\n    }\r\n  \r\n\r\n\r\n  handleClose() {\r\n    window.location.reload();\r\n    this.setState({ show: false });\r\n  }\r\n\r\n  handleShow() {\r\n    this.setState({ show: true });\r\n    this.mount()\r\n  }\r\n\r\n  render() {\r\n    let content;\r\n    if(this.state.isMetaMask){\r\n      content = <MyComponent tag='boo'></MyComponent>\r\n\r\n    }\r\n    if(this.state.isLoginMetaMask){\r\n      content = <MyComponent tag='foo'>\r\n      </MyComponent>\r\n     \r\n    }\r\n    if(this.state.isDesiredNetwork){\r\n      content = <MyComponent tag='coo'>\r\n\r\n      </MyComponent>\r\n    }\r\n    if(this.state.isLogin){\r\n      content = <MyComponent tag='doo' ></MyComponent>\r\n    }\r\n    \r\n    return (\r\n      <>\r\n       \r\n        <MetaMaskButton mb={3} onClick={this.handleShow}>Connect with MetaMask</MetaMaskButton>\r\n\r\n\r\n        <Modal show={this.state.show} onHide={this.handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Lets Start!</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>{content}</Modal.Body>\r\n          <Modal.Footer>\r\n\r\n            <Button variant=\"secondary\" onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={this.handleClose}>\r\n              Save Changes\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}