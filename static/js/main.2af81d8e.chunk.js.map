{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MetaMaskLoginButton","props","context","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","build_default","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uLA8NeA,cAhNb,SAAAA,EAAYC,EAAOC,GAAU,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAAAG,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KACrBJ,EAAOC,0EAqLb,OACEO,EAAAC,EAAAC,cAAA,WAmBEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,cA3M0BG,aCDdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAAOC,SAASC,eAAe,SD2HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2af81d8e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n// import { Fragment } from \"react\";\r\n// import { MetaMaskButton } from \"rimble-ui\";\r\n// import Web3 from \"web3\";\r\n// import MyComponent from \"./MyComponent\";\r\n// import Button from \"react-bootstrap/Button\";\r\n// import Modal from \"react-bootstrap/Modal\";\r\nimport LoginButton from 'react-metamask-login-button';\r\n// var detect = require(\"detect-browser\").detect;\r\n\r\n// var isMobile;\r\n// var path = window.location.href;\r\n\r\nclass MetaMaskLoginButton extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    // this.handleShow = this.handleShow.bind(this);\r\n    // this.handleClose = this.handleClose.bind(this);\r\n    // this.network = this.network.bind(this);\r\n    // this.mount = this.mount.bind(this);\r\n\r\n    // this.init = this.init.bind(this);\r\n\r\n    // this.state = {\r\n    //   show: false,\r\n    //   install: false,\r\n    //   isMetaMask: false,\r\n    //   isLoginMetaMask: false,\r\n    //   isDesiredNetwork: false,\r\n    //   isLogin: false\r\n    // };\r\n  }\r\n  // componentWillMount() {\r\n  //   if (typeof web3 !== \"undefined\") {\r\n  //     this.state.install = false;\r\n  //     window.ethereum.on(\"networkChanged\", accounts => {\r\n  //       if (accounts === \"3\") {\r\n  //         this.setState({\r\n  //           isLogin: true,\r\n  //           isDesiredNetwork: false,\r\n  //           isMetaMask: false,\r\n  //           isLoginMetaMask: false\r\n  //         });\r\n  //       } else {\r\n  //         this.setState({\r\n  //           isLogin: false,\r\n  //           isDesiredNetwork: true,\r\n  //           isMetaMask: false,\r\n  //           isLoginMetaMask: false\r\n  //         });\r\n  //       }\r\n  //     });\r\n  //   } else {\r\n  //     this.state.install = true;\r\n  //   }\r\n  // }\r\n\r\n  // mount() {\r\n  //   if (typeof web3 !== \"undefined\") {\r\n  //     this.setState({ isMetaMask: false });\r\n  //     this.init();\r\n  //   } else {\r\n  //     const browser = detect();\r\n\r\n  //     isMobile = !!detectMobile();\r\n\r\n  //     function detectMobile() {\r\n  //       return (\r\n  //         navigator.userAgent.match(/Android/i) ||\r\n  //         navigator.userAgent.match(/webOS/i) ||\r\n  //         navigator.userAgent.match(/iPhone/i) ||\r\n  //         navigator.userAgent.match(/iPad/i) ||\r\n  //         navigator.userAgent.match(/iPod/i) ||\r\n  //         navigator.userAgent.match(/BlackBerry/i) ||\r\n  //         navigator.userAgent.match(/Windows Phone/i)\r\n  //       );\r\n  //     }\r\n  //     if (!isMobile) {\r\n  //       window.open(\"http://fwd.metamask.io/\" + \"?\" + path);\r\n\r\n  //       switch (browser.name) {\r\n  //         case \"firefox\":\r\n  //           window.open(\r\n  //             \"https://addons.mozilla.org/en-US/firefox/addon/ether-metamask/\",\r\n  //             \"_blank\"\r\n  //           );\r\n\r\n  //           break;\r\n\r\n  //         case \"chrome\":\r\n  //           window.open(\r\n  //             \"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en\",\r\n  //             \"_blank\"\r\n  //           );\r\n\r\n  //           break;\r\n\r\n  //         case \"opera\":\r\n  //           window.open(\r\n  //             \"https://addons.opera.com/en/extensions/details/metamask/\",\r\n  //             \"_blank\"\r\n  //           );\r\n\r\n  //           break;\r\n  //       }\r\n  //     }\r\n\r\n  //     this.setState({ isMetaMask: true });\r\n  //   }\r\n  // }\r\n\r\n  // async init() {\r\n  //   try {\r\n  //     const accounts = await window.ethereum.enable();\r\n  //     this.setState({\r\n  //       isDesiredNetwork: true,\r\n  //       isMetaMask: false\r\n  //     });\r\n  //     this.network();\r\n  //   } catch (error) {\r\n  //     this.setState({ isLoginMetaMask: true, isMetaMask: false });\r\n  //   }\r\n  //   window.ethereum.on(\"accountsChanged\", accounts => {\r\n  //     if (accounts.length === 1) {\r\n  //       this.setState({\r\n  //         isLoginMetaMask: true,\r\n  //         isMetaMask: false,\r\n  //         isDesiredNetwork: false,\r\n  //         isLogin: false\r\n  //       });\r\n  //       this.init();\r\n  //     } else {\r\n  //       this.setState({\r\n  //         isLoginMetaMask: false,\r\n  //         isMetaMask: false,\r\n  //         isDesiredNetwork: false,\r\n  //         isLogin: true\r\n  //       });\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // network() {\r\n  //   // If a web3 instance is already provided by Meta Mask.\r\n  //   if (window.ethereum.networkVersion === \"3\") {\r\n  //     this.setState({ isLogin: true });\r\n  //   } else {\r\n  //     window.ethereum.on(\"networkChanged\", accounts => {\r\n  //       if (accounts === \"3\") {\r\n  //         this.setState({\r\n  //           isLogin: true,\r\n  //           isDesiredNetwork: false,\r\n  //           isMetaMask: false,\r\n  //           isLoginMetaMask: false\r\n  //         });\r\n  //       } else {\r\n  //         this.setState({\r\n  //           isLogin: false,\r\n  //           isDesiredNetwork: true,\r\n  //           isMetaMask: false,\r\n  //           isLoginMetaMask: false\r\n  //         });\r\n  //       }\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n  // handleClose() {\r\n  //   window.location.reload();\r\n  //   this.setState({ show: false });\r\n  // }\r\n\r\n  // handleShow() {\r\n  //   this.setState({ show: true });\r\n  //   this.mount();\r\n  // }\r\n\r\n   render() {\r\n  //   let content;\r\n  //   if (this.state.isMetaMask) {\r\n  //     content = <MyComponent tag=\"a\" />;\r\n  //   }\r\n  //   if (this.state.isLoginMetaMask) {\r\n  //     content = <MyComponent tag=\"b\" />;\r\n  //   }\r\n  //   if (this.state.isDesiredNetwork) {\r\n  //     content = <MyComponent tag=\"c\" />;\r\n  //   }\r\n  //   if (this.state.isLogin) {\r\n  //     content = <MyComponent tag=\"d\" />;\r\n  //   }\r\n  //   if (isMobile) {\r\n  //     content = <Fragment>Mobile coming soon!</Fragment>;\r\n  //   }\r\n\r\n    return (\r\n      <div>\r\n        {/* <MetaMaskButton mb={3} onClick={this.handleShow}>\r\n          {this.state.install ? \"Install MetaMask\" : \"Connect with MetaMask\"}\r\n        </MetaMaskButton>\r\n\r\n        <Modal show={this.state.show} onHide={this.handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Lets Start!</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>{content}</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={this.handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={this.handleClose}>\r\n              Done!\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal> */}\r\n        <LoginButton />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MetaMaskLoginButton;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport M from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<M />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}